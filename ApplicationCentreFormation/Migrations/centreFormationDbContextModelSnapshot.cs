// <auto-generated />
using System;
using ApplicationCentreFormation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApplicationCentreFormation.Migrations
{
    [DbContext(typeof(centreFormationDbContext))]
    partial class centreFormationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationCentreFormation.Models.Candidat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cin")
                        .IsRequired()
                        .HasColumnName("cin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasColumnName("cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotPass")
                        .IsRequired()
                        .HasColumnName("mot_pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnName("prenom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Candidat");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Formateur", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cin")
                        .IsRequired()
                        .HasColumnName("cin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasColumnName("cv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotPass")
                        .IsRequired()
                        .HasColumnName("mot_pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnName("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnName("prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TarifHoraire")
                        .IsRequired()
                        .HasColumnName("tarif_horaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnName("tel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Formateur");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.FormateurSpecialite", b =>
                {
                    b.Property<Guid>("FormateurId")
                        .HasColumnName("Formateur_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialiteId")
                        .HasColumnName("Specialite_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormateurId", "SpecialiteId");

                    b.HasIndex("SpecialiteId")
                        .HasName("IX_FK_FormateurSpecialite_Specialite");

                    b.ToTable("FormateurSpecialite");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Formation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChargeHoraire")
                        .IsRequired()
                        .HasColumnName("charge_horaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NiveauId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Programme")
                        .IsRequired()
                        .HasColumnName("programme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnName("titre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NiveauId")
                        .HasName("IX_FK_NiveauFormation");

                    b.ToTable("Formation");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Niveau", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Niveau");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateDeb")
                        .HasColumnName("date_deb")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateFin")
                        .HasColumnName("date_fin")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FormationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Planning")
                        .IsRequired()
                        .HasColumnName("planning")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormationId")
                        .HasName("IX_FK_FormationSession");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.SessionCandidat", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnName("Session_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CandidatId")
                        .HasColumnName("Candidat_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId", "CandidatId");

                    b.HasIndex("CandidatId")
                        .HasName("IX_FK_SessionCandidat_Candidat");

                    b.ToTable("SessionCandidat");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.SessionFormateur", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnName("Session_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FormateurId")
                        .HasColumnName("Formateur_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SessionId", "FormateurId");

                    b.HasIndex("FormateurId")
                        .HasName("IX_FK_SessionFormateur_Formateur");

                    b.ToTable("SessionFormateur");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Specialite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnName("nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specialite");
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.FormateurSpecialite", b =>
                {
                    b.HasOne("ApplicationCentreFormation.Models.Formateur", "Formateur")
                        .WithMany("FormateurSpecialite")
                        .HasForeignKey("FormateurId")
                        .HasConstraintName("FK_FormateurSpecialite_Formateur")
                        .IsRequired();

                    b.HasOne("ApplicationCentreFormation.Models.Specialite", "Specialite")
                        .WithMany("FormateurSpecialite")
                        .HasForeignKey("SpecialiteId")
                        .HasConstraintName("FK_FormateurSpecialite_Specialite")
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Formation", b =>
                {
                    b.HasOne("ApplicationCentreFormation.Models.Niveau", "Niveau")
                        .WithMany("Formation")
                        .HasForeignKey("NiveauId")
                        .HasConstraintName("FK_NiveauFormation")
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.Session", b =>
                {
                    b.HasOne("ApplicationCentreFormation.Models.Formation", "Formation")
                        .WithMany("Session")
                        .HasForeignKey("FormationId")
                        .HasConstraintName("FK_FormationSession")
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.SessionCandidat", b =>
                {
                    b.HasOne("ApplicationCentreFormation.Models.Candidat", "Candidat")
                        .WithMany("SessionCandidat")
                        .HasForeignKey("CandidatId")
                        .HasConstraintName("FK_SessionCandidat_Candidat")
                        .IsRequired();

                    b.HasOne("ApplicationCentreFormation.Models.Session", "Session")
                        .WithMany("SessionCandidat")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_SessionCandidat_Session")
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCentreFormation.Models.SessionFormateur", b =>
                {
                    b.HasOne("ApplicationCentreFormation.Models.Formateur", "Formateur")
                        .WithMany("SessionFormateur")
                        .HasForeignKey("FormateurId")
                        .HasConstraintName("FK_SessionFormateur_Formateur")
                        .IsRequired();

                    b.HasOne("ApplicationCentreFormation.Models.Session", "Session")
                        .WithMany("SessionFormateur")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_SessionFormateur_Session")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
